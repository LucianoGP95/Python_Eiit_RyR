import os

src = "../src"
Analysis = "../src"

spec_content = (
    "# -*- mode: python ; coding: utf-8 -*-\n\n"
    "block_cipher = None\n\n"
    "a = Analysis(\n"
    "    [\n"
    "        '" + os.path.join(Analysis, 'main.py') + "',\n"
    "        '" + os.path.join(Analysis, 'core_logic.py') + "',\n"
    "        '" + os.path.join(Analysis, 'custom_entry_widget.py') + "',\n"
    "        '" + os.path.join(Analysis, 'tools', 'database.py') + "',\n"
    "        '" + os.path.join(Analysis, 'tools', '_db_tools.py') + "',\n"
    "        '" + os.path.join(Analysis, 'logic', 'file_number_checker.py') + "',\n"
    "        '" + os.path.join(Analysis, 'logic', 'intelligent_cameras.py') + "',\n"
    "        '" + os.path.join(Analysis, 'logic', 'light_guides.py') + "'\n"
    "    ],\n"
    "    pathex=['" + datas + "'],\n"
    "    binaries=[],\n"
    "    datas=[\n"
    "        ('" + os.path.join(project_folder, 'resources', 'help.json') + "', 'datas'),\n"
    "        ('" + os.path.join(project_folder, 'assets', 'background.png') + "', 'datas/assets'),\n"
    "        ('" + os.path.join(project_folder, 'assets', 'icon.ico') + "', 'datas/assets'),\n"
    "    ],\n"
    "    hiddenimports=[],\n"
    "    hookspath=[],\n"
    "    hooksconfig={},\n"
    "    runtime_hooks=[],\n"
    "    excludes=[],\n"
    "    noarchive=False,\n"
    ")\n\n"
    "pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)\n\n"
    "exe = EXE(\n"
    "    pyz,\n"
    "    a.scripts,\n"
    "    a.binaries,\n"
    "    a.zipfiles,\n"
    "    a.datas,\n"
    "    [],\n"
    "    name='main',\n"
    "    debug=False,\n"
    "    bootloader_ignore_signals=False,\n"
    "    strip=False,\n"
    "    upx=True,\n"
    "    upx_exclude=[],\n"
    "    runtime_tmpdir=None,\n"
    "    console=True,\n"
    "    disable_windowed_traceback=False,\n"
    "    argv_emulation=False,\n"
    "    target_arch=None,\n"
    "    codesign_identity=None,\n"
    "    entitlements_file=None,\n"
    "    icon='" + os.path.join(project_folder, 'assets', 'icon.ico') + "'\n"
    ")\n"
)

with open(os.path.join(os.path.dirname(__file__), "main.spec"), "w") as spec_file:
    spec_file.write(spec_content)
